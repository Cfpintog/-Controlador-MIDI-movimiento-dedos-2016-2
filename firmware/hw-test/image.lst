
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000718  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       00000008  00000718  00000718  0000076c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000001c  00000720  00000720  00000774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000098  0000073c  0000073c  00000790  2**2
                  ALLOC
  4 .debug_abbrev 00000336  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ce  00000000  00000000  00000ac6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005cf  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001a0  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000180  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000001f1  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000009a  00000000  00000000  00001d75  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00001e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00001e4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000022d  00000000  00000000  00001ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000011  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 00 e0 	calli 44c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 07 40 	ori gp,gp,0x740
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 07 3c 	ori r1,r1,0x73c
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 07 d4 	ori r3,r3,0x7d4

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 00 70 	calli 2fc <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <nota>:



	int nota (int cmb)
		{
		if (cmb==DO)
 208:	34 02 00 01 	mvi r2,1
 20c:	44 22 00 18 	be r1,r2,26c <nota+0x64>
			{
			x= DO_3;
			}
		else if (cmb==RE)
 210:	34 02 00 02 	mvi r2,2
 214:	44 22 00 1c 	be r1,r2,284 <nota+0x7c>
			{
			x=RE_3;
			}
		else if (cmb==MI)
 218:	34 02 00 03 	mvi r2,3
 21c:	44 22 00 20 	be r1,r2,29c <nota+0x94>
			{
			x=MI_3;
			}
		else if (cmb==FA)
 220:	34 02 00 04 	mvi r2,4
 224:	44 22 00 0c 	be r1,r2,254 <nota+0x4c>
			{
			x=FA_3;
			}
		else if (cmb==SOL)
 228:	34 02 00 05 	mvi r2,5
 22c:	44 22 00 22 	be r1,r2,2b4 <nota+0xac>
			{
			x=SOL_3;
			}
		else if (cmb==LA)
 230:	34 02 00 06 	mvi r2,6
 234:	44 22 00 26 	be r1,r2,2cc <nota+0xc4>
			{
			x=LA_3;
			}
		else if (cmb==SI)
 238:	34 02 00 07 	mvi r2,7
 23c:	44 22 00 2a 	be r1,r2,2e4 <nota+0xdc>
			{
			x=SI_3;
			}
		else	
			{
			x=0;
 240:	78 01 00 00 	mvhi r1,0x0
 244:	38 21 07 40 	ori r1,r1,0x740
 248:	30 20 00 00 	sb (r1+0),r0
 24c:	34 01 00 00 	mvi r1,0
			}
		return x;
		}
 250:	c3 a0 00 00 	ret
			{
			x=MI_3;
			}
		else if (cmb==FA)
			{
			x=FA_3;
 254:	78 01 00 00 	mvhi r1,0x0
 258:	38 21 07 40 	ori r1,r1,0x740
 25c:	34 02 00 35 	mvi r2,53
 260:	30 22 00 00 	sb (r1+0),r2
 264:	34 01 00 35 	mvi r1,53
 268:	c3 a0 00 00 	ret

	int nota (int cmb)
		{
		if (cmb==DO)
			{
			x= DO_3;
 26c:	78 01 00 00 	mvhi r1,0x0
 270:	38 21 07 40 	ori r1,r1,0x740
 274:	34 02 00 30 	mvi r2,48
 278:	30 22 00 00 	sb (r1+0),r2
 27c:	34 01 00 30 	mvi r1,48
 280:	c3 a0 00 00 	ret
			}
		else if (cmb==RE)
			{
			x=RE_3;
 284:	78 01 00 00 	mvhi r1,0x0
 288:	38 21 07 40 	ori r1,r1,0x740
 28c:	34 02 00 32 	mvi r2,50
 290:	30 22 00 00 	sb (r1+0),r2
 294:	34 01 00 32 	mvi r1,50
 298:	c3 a0 00 00 	ret
			}
		else if (cmb==MI)
			{
			x=MI_3;
 29c:	78 01 00 00 	mvhi r1,0x0
 2a0:	38 21 07 40 	ori r1,r1,0x740
 2a4:	34 02 00 34 	mvi r2,52
 2a8:	30 22 00 00 	sb (r1+0),r2
 2ac:	34 01 00 34 	mvi r1,52
 2b0:	c3 a0 00 00 	ret
			{
			x=FA_3;
			}
		else if (cmb==SOL)
			{
			x=SOL_3;
 2b4:	78 01 00 00 	mvhi r1,0x0
 2b8:	38 21 07 40 	ori r1,r1,0x740
 2bc:	34 02 00 37 	mvi r2,55
 2c0:	30 22 00 00 	sb (r1+0),r2
 2c4:	34 01 00 37 	mvi r1,55
 2c8:	c3 a0 00 00 	ret
			}
		else if (cmb==LA)
			{
			x=LA_3;
 2cc:	78 01 00 00 	mvhi r1,0x0
 2d0:	38 21 07 40 	ori r1,r1,0x740
 2d4:	34 02 00 39 	mvi r2,57
 2d8:	30 22 00 00 	sb (r1+0),r2
 2dc:	34 01 00 39 	mvi r1,57
 2e0:	c3 a0 00 00 	ret
			}
		else if (cmb==SI)
			{
			x=SI_3;
 2e4:	78 01 00 00 	mvhi r1,0x0
 2e8:	38 21 07 40 	ori r1,r1,0x740
 2ec:	34 02 00 3b 	mvi r2,59
 2f0:	30 22 00 00 	sb (r1+0),r2
 2f4:	34 01 00 3b 	mvi r1,59
 2f8:	c3 a0 00 00 	ret

000002fc <main>:




int main()
	{//uint8_t vol;     //señal de volumen transmitida en UART
 2fc:	37 9c ff e4 	addi sp,sp,-28
 300:	5b 8b 00 1c 	sw (sp+28),r11
 304:	5b 8c 00 18 	sw (sp+24),r12
 308:	5b 8d 00 14 	sw (sp+20),r13
 30c:	5b 8e 00 10 	sw (sp+16),r14
 310:	5b 8f 00 0c 	sw (sp+12),r15
 314:	5b 90 00 08 	sw (sp+8),r16
 318:	5b 9d 00 04 	sw (sp+4),ra
	uint8_t tn;
	uint8_t vel;
	//uint8_t v;   	  //señal recibida de spi (conversor)
	uint8_t n;   //señal recibida de gpio (fototransistor)
	irq_set_mask(0x02);
 31c:	34 01 00 02 	mvi r1,2
 320:	78 0e 00 00 	mvhi r14,0x0
 324:	78 0d 00 00 	mvhi r13,0x0
 328:	fb ff ff 8c 	calli 158 <irq_set_mask>
 32c:	39 ce 07 4c 	ori r14,r14,0x74c
	irq_enable();
 330:	fb ff ff 84 	calli 140 <irq_enable>
 334:	39 ad 07 49 	ori r13,r13,0x749
		
	tic_init();//funcion timer interrupcion
 338:	f8 00 00 9d 	calli 5ac <tic_init>
		return x;
		}

	int speed(int comb)
		{
		if(comb==DO || comb==RE || comb==MI || comb==FA || comb==SOL || comb==LA || comb==SI)
 33c:	34 0f 00 06 	mvi r15,6
			{
			 y=VEL_ON;
 340:	34 10 00 40 	mvi r16,64
		
	tic_init();//funcion timer interrupcion
		for(;;)
		{//lectura de datos
		//conversor
		spi_putchar0();
 344:	f8 00 00 db 	calli 6b0 <spi_putchar0>
		v=spi_getchar();
 348:	f8 00 00 eb 	calli 6f4 <spi_getchar>
 34c:	31 c1 00 00 	sb (r14+0),r1

		//fototransistores
		n = gpio_get();	
 350:	f8 00 00 a5 	calli 5e4 <gpio_get>
 354:	b8 20 58 00 	mv r11,r1
		
		
		//adecuacion señales tono y velocidad		
		tn=nota(n);
 358:	fb ff ff ac 	calli 208 <nota>
		return x;
		}

	int speed(int comb)
		{
		if(comb==DO || comb==RE || comb==MI || comb==FA || comb==SOL || comb==LA || comb==SI)
 35c:	35 62 ff ff 	addi r2,r11,-1
		//fototransistores
		n = gpio_get();	
		
		
		//adecuacion señales tono y velocidad		
		tn=nota(n);
 360:	20 2c 00 ff 	andi r12,r1,0xff
		return x;
		}

	int speed(int comb)
		{
		if(comb==DO || comb==RE || comb==MI || comb==FA || comb==SOL || comb==LA || comb==SI)
 364:	54 4f 00 0e 	bgu r2,r15,39c <main+0xa0>
			{
			 y=VEL_ON;
 368:	31 b0 00 00 	sb (r13+0),r16
 36c:	34 0b 00 40 	mvi r11,64
		//Transmisión de mensaje MIDI
		//Volumen
		//uart_putchar(CTRL_CH);//0xB0
		//uart_putchar(VOL_CH);//0x07
		//uart_putchar(v);
		msleep(10);
 370:	34 01 00 0a 	mvi r1,10
 374:	f8 00 00 68 	calli 514 <msleep>
		//Tipo de nota
		
		uart_putchar(NOTE_ON);//0x90
 378:	34 01 00 90 	mvi r1,144
 37c:	f8 00 00 b6 	calli 654 <uart_putchar>
		uart_putchar(tn);//
 380:	b9 80 08 00 	mv r1,r12
 384:	f8 00 00 b4 	calli 654 <uart_putchar>
		uart_putchar(vel);
 388:	b9 60 08 00 	mv r1,r11
 38c:	f8 00 00 b2 	calli 654 <uart_putchar>
		msleep(100);
 390:	34 01 00 64 	mvi r1,100
 394:	f8 00 00 60 	calli 514 <msleep>
		
		}
 398:	e3 ff ff eb 	bi 344 <main+0x48>
			{
			 y=VEL_ON;
			}
		else
			{
			y=VEL_OFF;
 39c:	31 a0 00 00 	sb (r13+0),r0
 3a0:	34 0b 00 00 	mvi r11,0
 3a4:	e3 ff ff f3 	bi 370 <main+0x74>

000003a8 <speed>:
		return x;
		}

	int speed(int comb)
		{
		if(comb==DO || comb==RE || comb==MI || comb==FA || comb==SOL || comb==LA || comb==SI)
 3a8:	34 21 ff ff 	addi r1,r1,-1
 3ac:	34 02 00 06 	mvi r2,6
 3b0:	54 22 00 07 	bgu r1,r2,3cc <speed+0x24>
			{
			 y=VEL_ON;
 3b4:	78 01 00 00 	mvhi r1,0x0
 3b8:	38 21 07 49 	ori r1,r1,0x749
 3bc:	34 02 00 40 	mvi r2,64
 3c0:	30 22 00 00 	sb (r1+0),r2
 3c4:	34 01 00 40 	mvi r1,64
 3c8:	c3 a0 00 00 	ret
			}
		else
			{
			y=VEL_OFF;
 3cc:	78 01 00 00 	mvhi r1,0x0
 3d0:	38 21 07 49 	ori r1,r1,0x749
 3d4:	30 20 00 00 	sb (r1+0),r0
 3d8:	34 01 00 00 	mvi r1,0
			}
		return y;
		}
 3dc:	c3 a0 00 00 	ret

000003e0 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 3e0:	c3 a0 00 00 	ret

000003e4 <prueba>:
uint8_t v;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 3e4:	78 01 00 00 	mvhi r1,0x0
 3e8:	38 21 07 28 	ori r1,r1,0x728
	   timer0->tcr0 = 0xAA;
 3ec:	78 02 00 00 	mvhi r2,0x0
uint8_t v;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 3f0:	28 24 00 00 	lw r4,(r1+0)
	   timer0->tcr0 = 0xAA;
 3f4:	38 42 07 2c 	ori r2,r2,0x72c
	   spi0->rxtx=1;
 3f8:	78 01 00 00 	mvhi r1,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 3fc:	28 43 00 00 	lw r3,(r2+0)
	   spi0->rxtx=1;
 400:	38 21 07 34 	ori r1,r1,0x734
 404:	28 21 00 00 	lw r1,(r1+0)
uint8_t v;
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
 408:	34 02 00 1e 	mvi r2,30
 40c:	58 82 00 04 	sw (r4+4),r2
	   timer0->tcr0 = 0xAA;
	   spi0->rxtx=1;
	   spi0->cs=3;
	   spi0->divisor=4;
	   i2c0->rxtx=5;
 410:	78 02 00 00 	mvhi r2,0x0
isr_ptr_t isr_table[32];

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
 414:	34 04 00 aa 	mvi r4,170
 418:	58 64 00 00 	sw (r3+0),r4
	   spi0->rxtx=1;
	   spi0->cs=3;
	   spi0->divisor=4;
	   i2c0->rxtx=5;
 41c:	38 42 07 38 	ori r2,r2,0x738

void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   spi0->rxtx=1;
 420:	34 03 00 01 	mvi r3,1
 424:	58 23 00 00 	sw (r1+0),r3
	   spi0->cs=3;
	   spi0->divisor=4;
	   i2c0->rxtx=5;
 428:	28 42 00 00 	lw r2,(r2+0)
void prueba()
{
	   uart0->rxtx=30;
	   timer0->tcr0 = 0xAA;
	   spi0->rxtx=1;
	   spi0->cs=3;
 42c:	34 03 00 03 	mvi r3,3
 430:	58 23 00 08 	sw (r1+8),r3
	   spi0->divisor=4;
 434:	34 03 00 04 	mvi r3,4
 438:	58 23 00 0c 	sw (r1+12),r3
	   i2c0->rxtx=5;
 43c:	34 01 00 05 	mvi r1,5
 440:	58 41 00 00 	sw (r2+0),r1
	   i2c0->divisor=5;
 444:	58 41 00 04 	sw (r2+4),r1

}
 448:	c3 a0 00 00 	ret

0000044c <irq_handler>:

void irq_handler(uint32_t pending)
//{ if (pending==0xFFFFFFFD)


{
 44c:	78 01 00 00 	mvhi r1,0x0
 450:	38 21 07 28 	ori r1,r1,0x728
 454:	28 21 00 00 	lw r1,(r1+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 458:	28 22 00 00 	lw r2,(r1+0)
 45c:	20 42 00 10 	andi r2,r2,0x10
 460:	5c 40 ff fe 	bne r2,r0,458 <irq_handler+0xc>
	uart0->rxtx = c;
 464:	34 02 00 b0 	mvi r2,176
 468:	58 22 00 04 	sw (r1+4),r2
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 46c:	28 22 00 00 	lw r2,(r1+0)
 470:	20 42 00 10 	andi r2,r2,0x10
 474:	5c 40 ff fe 	bne r2,r0,46c <irq_handler+0x20>


{
		uart_putchar(CTRL_CH);//0xB0
		uart_putchar(VOL_CH);//0x07
		uart_putchar(v);
 478:	78 02 00 00 	mvhi r2,0x0
 47c:	38 42 07 4c 	ori r2,r2,0x74c
 480:	40 43 00 00 	lbu r3,(r2+0)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 484:	34 02 00 07 	mvi r2,7
 488:	58 22 00 04 	sw (r1+4),r2
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 48c:	28 22 00 00 	lw r2,(r1+0)
 490:	20 42 00 10 	andi r2,r2,0x10
 494:	5c 40 ff fe 	bne r2,r0,48c <irq_handler+0x40>
		uart_putchar(CTRL_CH);//0xB0
		uart_putchar(VOL_CH);//0x07
		uart_putchar(v);
//		pending=0xFFFFFFFF;
			
	timer0->counter0 = 0;
 498:	78 02 00 00 	mvhi r2,0x0
 49c:	38 42 07 2c 	ori r2,r2,0x72c
 4a0:	28 42 00 00 	lw r2,(r2+0)
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
	uart0->rxtx = c;
 4a4:	58 23 00 04 	sw (r1+4),r3
		uart_putchar(VOL_CH);//0x07
		uart_putchar(v);
//		pending=0xFFFFFFFF;
			
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN |TIMER_AR | TIMER_IRQEN;
 4a8:	34 01 00 0e 	mvi r1,14
		uart_putchar(CTRL_CH);//0xB0
		uart_putchar(VOL_CH);//0x07
		uart_putchar(v);
//		pending=0xFFFFFFFF;
			
	timer0->counter0 = 0;
 4ac:	58 40 00 08 	sw (r2+8),r0
	timer0->tcr0     = TIMER_EN |TIMER_AR | TIMER_IRQEN;
 4b0:	58 41 00 00 	sw (r2+0),r1
	//for(i=0; i<32; i++) {
	//	if (pending & 0x01) (*isr_table[i])();
	//	pending >>= 1;

	//}
}
 4b4:	c3 a0 00 00 	ret

000004b8 <isr_init>:

void isr_init()
{
 4b8:	78 01 00 00 	mvhi r1,0x0
 4bc:	78 02 00 00 	mvhi r2,0x0
 4c0:	38 21 07 50 	ori r1,r1,0x750
 4c4:	38 42 03 e0 	ori r2,r2,0x3e0
	//	pending >>= 1;

	//}
}

void isr_init()
 4c8:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 4cc:	58 22 00 00 	sw (r1+0),r2
 4d0:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 4d4:	5c 23 ff fe 	bne r1,r3,4cc <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 4d8:	c3 a0 00 00 	ret

000004dc <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 4dc:	78 03 00 00 	mvhi r3,0x0
 4e0:	3c 21 00 02 	sli r1,r1,2
 4e4:	38 63 07 50 	ori r3,r3,0x750
 4e8:	b4 61 18 00 	add r3,r3,r1
 4ec:	58 62 00 00 	sw (r3+0),r2
}
 4f0:	c3 a0 00 00 	ret

000004f4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 4f4:	78 03 00 00 	mvhi r3,0x0
 4f8:	3c 21 00 02 	sli r1,r1,2
 4fc:	38 63 07 50 	ori r3,r3,0x750
 500:	78 02 00 00 	mvhi r2,0x0
 504:	b4 61 18 00 	add r3,r3,r1
 508:	38 42 03 e0 	ori r2,r2,0x3e0
 50c:	58 62 00 00 	sw (r3+0),r2
}
 510:	c3 a0 00 00 	ret

00000514 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 514:	78 04 00 00 	mvhi r4,0x0
 518:	38 84 07 18 	ori r4,r4,0x718
 51c:	28 83 00 00 	lw r3,(r4+0)
 520:	78 02 00 00 	mvhi r2,0x0
 524:	38 42 07 2c 	ori r2,r2,0x72c
 528:	28 42 00 00 	lw r2,(r2+0)
 52c:	88 23 08 00 	mul r1,r1,r3
 530:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 534:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 538:	34 01 00 08 	mvi r1,8
 53c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 540:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 544:	20 21 00 01 	andi r1,r1,0x1
 548:	44 20 ff fe 	be r1,r0,540 <msleep+0x2c>
}
 54c:	c3 a0 00 00 	ret

00000550 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 550:	78 02 00 00 	mvhi r2,0x0
 554:	38 42 07 2c 	ori r2,r2,0x72c
 558:	28 42 00 00 	lw r2,(r2+0)
 55c:	08 21 00 64 	muli r1,r1,100
 560:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 564:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 568:	34 01 00 08 	mvi r1,8
 56c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 570:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 574:	20 21 00 01 	andi r1,r1,0x1
 578:	44 20 ff fe 	be r1,r0,570 <nsleep+0x20>
}
 57c:	c3 a0 00 00 	ret

00000580 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 580:	78 01 00 00 	mvhi r1,0x0
 584:	38 21 07 d0 	ori r1,r1,0x7d0
 588:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 58c:	78 02 00 00 	mvhi r2,0x0
 590:	38 42 07 2c 	ori r2,r2,0x72c
 594:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 598:	34 63 00 01 	addi r3,r3,1
 59c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 5a0:	34 01 00 0e 	mvi r1,14
 5a4:	58 41 00 00 	sw (r2+0),r1
}
 5a8:	c3 a0 00 00 	ret

000005ac <tic_init>:

void tic_init()
{
	tic_msec = 0;
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000)*210;
 5ac:	78 01 00 00 	mvhi r1,0x0
 5b0:	78 04 00 00 	mvhi r4,0x0
 5b4:	38 21 07 2c 	ori r1,r1,0x72c
 5b8:	38 84 07 1c 	ori r4,r4,0x71c
 5bc:	28 21 00 00 	lw r1,(r1+0)
 5c0:	28 83 00 00 	lw r3,(r4+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5c4:	78 02 00 00 	mvhi r2,0x0
 5c8:	38 42 07 d0 	ori r2,r2,0x7d0
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000)*210;
 5cc:	58 23 00 04 	sw (r1+4),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 5d0:	58 40 00 00 	sw (r2+0),r0
	// Setup timer0.0
	timer0->compare0 = (FCPU/1000)*210;
	timer0->counter0 = 0;
 5d4:	58 20 00 08 	sw (r1+8),r0
	timer0->tcr0     = TIMER_EN |TIMER_AR | TIMER_IRQEN;
 5d8:	34 02 00 0e 	mvi r2,14
 5dc:	58 22 00 00 	sw (r1+0),r2
}
 5e0:	c3 a0 00 00 	ret

000005e4 <gpio_get>:
/***************************************************************************
 * GPIO Functions
*/
char gpio_get()
{
return gpio0->gpio_in;
 5e4:	78 01 00 00 	mvhi r1,0x0
 5e8:	38 21 07 30 	ori r1,r1,0x730
 5ec:	28 21 00 00 	lw r1,(r1+0)
 5f0:	28 21 00 00 	lw r1,(r1+0)
}
 5f4:	20 21 00 ff 	andi r1,r1,0xff
 5f8:	c3 a0 00 00 	ret

000005fc <gpio_dir_get>:


char gpio_dir_get()
{
return gpio0->gpio_dir;
 5fc:	78 01 00 00 	mvhi r1,0x0
 600:	38 21 07 30 	ori r1,r1,0x730
 604:	28 21 00 00 	lw r1,(r1+0)
 608:	28 21 00 08 	lw r1,(r1+8)
}
 60c:	20 21 00 ff 	andi r1,r1,0xff
 610:	c3 a0 00 00 	ret

00000614 <gpio_dir_set>:

void gpio_dir_set(char g)
{
	gpio0->gpio_dir=g;
 614:	78 02 00 00 	mvhi r2,0x0
 618:	38 42 07 30 	ori r2,r2,0x730
 61c:	28 42 00 00 	lw r2,(r2+0)
{
return gpio0->gpio_dir;
}

void gpio_dir_set(char g)
{
 620:	20 21 00 ff 	andi r1,r1,0xff
	gpio0->gpio_dir=g;
 624:	58 41 00 08 	sw (r2+8),r1
}
 628:	c3 a0 00 00 	ret

0000062c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 62c:	c3 a0 00 00 	ret

00000630 <uart_getchar>:

char uart_getchar()
{   
 630:	78 01 00 00 	mvhi r1,0x0
 634:	38 21 07 28 	ori r1,r1,0x728
 638:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 63c:	28 41 00 00 	lw r1,(r2+0)
 640:	20 21 00 01 	andi r1,r1,0x1
 644:	44 20 ff fe 	be r1,r0,63c <uart_getchar+0xc>
	return uart0->rxtx;
 648:	28 41 00 04 	lw r1,(r2+4)
}
 64c:	20 21 00 ff 	andi r1,r1,0xff
 650:	c3 a0 00 00 	ret

00000654 <uart_putchar>:

void uart_putchar(char c)
{
 654:	78 02 00 00 	mvhi r2,0x0
 658:	38 42 07 28 	ori r2,r2,0x728
 65c:	28 43 00 00 	lw r3,(r2+0)
 660:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 664:	28 62 00 00 	lw r2,(r3+0)
 668:	20 42 00 10 	andi r2,r2,0x10
 66c:	5c 40 ff fe 	bne r2,r0,664 <uart_putchar+0x10>
	uart0->rxtx = c;
 670:	58 61 00 04 	sw (r3+4),r1
}
 674:	c3 a0 00 00 	ret

00000678 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 678:	40 24 00 00 	lbu r4,(r1+0)
 67c:	44 80 00 0b 	be r4,r0,6a8 <uart_putstr+0x30>
 680:	78 02 00 00 	mvhi r2,0x0
 684:	38 42 07 28 	ori r2,r2,0x728
 688:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 68c:	28 62 00 00 	lw r2,(r3+0)
 690:	20 42 00 10 	andi r2,r2,0x10
 694:	5c 40 ff fe 	bne r2,r0,68c <uart_putstr+0x14>
	uart0->rxtx = c;
 698:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 69c:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 6a0:	40 24 00 00 	lbu r4,(r1+0)
 6a4:	5c 82 ff fa 	bne r4,r2,68c <uart_putstr+0x14>
 6a8:	c3 a0 00 00 	ret

000006ac <spi_init>:
/***************************************************************************
 * SPI Functions
 */
void spi_init()
{		
}
 6ac:	c3 a0 00 00 	ret

000006b0 <spi_putchar0>:

void spi_putchar0()
{
 6b0:	78 01 00 00 	mvhi r1,0x0
 6b4:	38 21 07 34 	ori r1,r1,0x734
 6b8:	28 22 00 00 	lw r2,(r1+0)
	while(spi0->run == 1);
 6bc:	34 03 00 01 	mvi r3,1
 6c0:	28 41 00 04 	lw r1,(r2+4)
 6c4:	44 23 ff ff 	be r1,r3,6c0 <spi_putchar0+0x10>
	spi0->cs = 0;
 6c8:	58 40 00 08 	sw (r2+8),r0
	spi0->rxtx = 0x00;
 6cc:	58 40 00 00 	sw (r2+0),r0
}
 6d0:	c3 a0 00 00 	ret

000006d4 <spi_putchar>:
void spi_putchar(uint32_t c)
{
 6d4:	78 02 00 00 	mvhi r2,0x0
 6d8:	38 42 07 34 	ori r2,r2,0x734
 6dc:	28 43 00 00 	lw r3,(r2+0)
	while(spi0->run == 1);
 6e0:	34 04 00 01 	mvi r4,1
 6e4:	28 62 00 04 	lw r2,(r3+4)
 6e8:	44 44 ff ff 	be r2,r4,6e4 <spi_putchar+0x10>
	spi0->rxtx = c;
 6ec:	58 61 00 00 	sw (r3+0),r1
			
}
 6f0:	c3 a0 00 00 	ret

000006f4 <spi_getchar>:
char spi_getchar()
{
 6f4:	78 01 00 00 	mvhi r1,0x0
 6f8:	38 21 07 34 	ori r1,r1,0x734
 6fc:	28 22 00 00 	lw r2,(r1+0)
	while(spi0->run == 1);
 700:	34 03 00 01 	mvi r3,1
 704:	28 41 00 04 	lw r1,(r2+4)
 708:	44 23 ff ff 	be r1,r3,704 <spi_getchar+0x10>

	return spi0->rxtx;	
 70c:	28 41 00 00 	lw r1,(r2+0)
}
 710:	20 21 00 ff 	andi r1,r1,0xff
 714:	c3 a0 00 00 	ret
